Kachua v2.3
------------
pendown
if :x > 0 [
	if :y > 0 [
		if :z > 0 [
			forward 10
            left 45
            backward 10
            right 45
		]
		else [
            backward 10
            left 45
            forward 20          
            
            ]
	]
	else [
        backward 10
        left 45
        forward 20   
    ]
]
else [
    
    backward 10
    left 45
    forward 20   
]

if :x > 0 [
	if :y > 0 [
		if :z > 0[

			forward :move
			right 10
		
		] else [
            backward 10
            left 45
            forward 20   ]
		
	] else [
        backward 10
        left 45
        forward 20   
    ]


	:move = :move + 10

] else [backward 10]
SBFL...
pendown
if :x > 0 [
	if :y > 0 [
		if :z > 0 [
			forward 10
            left 45
            backward 10
            right 45
		]
		else [
            backward 10
            left 45
            forward 20          
            
            ]
	]
	else [
        backward 10
        left 45
        forward 20   
    ]
]
else [
    
    backward 10
    left 45
    forward 20   
]

if :x > 0 [
	if :y > 0 [
		if :z > 0[

			forward :move
			right 10
		
		] else [
            backward 10
            left 45
            forward 20   ]
		
	] else [
        backward 10
        left 45
        forward 20   
    ]


	:move = :move + 10

] else [backward 10]
pendown
if :x > 0 [
	if :y > 0 [
		if :z > 0 [
			forward 10
            left 45
            backward 10
            right 45
		]
		else [
            backward 10
            left 45
            forward 20          
            
            ]
	]
	else [
        backward 10
        left 45
        forward 20   
    ]
]
else [
    
    backward 10
    left 45
    forward 20   
]

if :x > 0 [
	if :y > 0 [
		if :z > 0[

			forward :move
			right 10
		
		] else [
            backward 10
            left 45
            forward 20   ]
		
	] else [
        backward 100
        left 45
        forward 20   
    ]


	:move = :move + 10

] else [backward 80]
Program counter :  0
pendown PenCommand 1
  PenCommand
Program counter :  1
(:x > 0) ConditionCommand 16
  Branch Instruction
Program counter :  17
backward 10 MoveCommand 1
  MoveCommand
Program counter :  18
left 45 MoveCommand 1
  MoveCommand
Program counter :  19
forward 20 MoveCommand 1
  MoveCommand
Program counter :  20
(:x > 0) ConditionCommand 15
  Branch Instruction
Program counter :  35
backward 10 MoveCommand 1
  MoveCommand
[SBFL] Program Ended.

Program counter :  0
pendown PenCommand 1
  PenCommand
Program counter :  1
(:x > 0) ConditionCommand 16
  Branch Instruction
Program counter :  17
backward 10 MoveCommand 1
  MoveCommand
Program counter :  18
left 45 MoveCommand 1
  MoveCommand
Program counter :  19
forward 20 MoveCommand 1
  MoveCommand
Program counter :  20
(:x > 0) ConditionCommand 15
  Branch Instruction
Program counter :  35
backward 10 MoveCommand 1
  MoveCommand
[SBFL] Program Ended.

Program counter :  0
pendown PenCommand 1
  PenCommand
Program counter :  1
(:x > 0) ConditionCommand 16
  Branch Instruction
Program counter :  2
(:y > 0) ConditionCommand 11
  Branch Instruction
Program counter :  13
backward 10 MoveCommand 1
  MoveCommand
Program counter :  14
left 45 MoveCommand 1
  MoveCommand
Program counter :  15
forward 20 MoveCommand 1
  MoveCommand
Program counter :  16
False ConditionCommand 4
  Branch Instruction
Program counter :  20
(:x > 0) ConditionCommand 15
  Branch Instruction
Program counter :  21
(:y > 0) ConditionCommand 9
  Branch Instruction
Program counter :  30
backward 10 MoveCommand 1
  MoveCommand
Program counter :  31
left 45 MoveCommand 1
  MoveCommand
Program counter :  32
forward 20 MoveCommand 1
  MoveCommand
Program counter :  33
:move = (:move + 10) AssignmentCommand 1
  Assignment Statement
Program counter :  34
False ConditionCommand 2
  Branch Instruction
[SBFL] Program Ended.

Program counter :  0
pendown PenCommand 1
  PenCommand
Program counter :  1
(:x > 0) ConditionCommand 16
  Branch Instruction
Program counter :  2
(:y > 0) ConditionCommand 11
  Branch Instruction
Program counter :  3
(:z > 0) ConditionCommand 6
  Branch Instruction
Program counter :  9
backward 10 MoveCommand 1
  MoveCommand
Program counter :  10
left 45 MoveCommand 1
  MoveCommand
Program counter :  11
forward 20 MoveCommand 1
  MoveCommand
Program counter :  12
False ConditionCommand 4
  Branch Instruction
Program counter :  16
False ConditionCommand 4
  Branch Instruction
Program counter :  20
(:x > 0) ConditionCommand 15
  Branch Instruction
Program counter :  21
(:y > 0) ConditionCommand 9
  Branch Instruction
Program counter :  22
(:z > 0) ConditionCommand 4
  Branch Instruction
Program counter :  26
backward 10 MoveCommand 1
  MoveCommand
Program counter :  27
left 45 MoveCommand 1
  MoveCommand
Program counter :  28
forward 20 MoveCommand 1
  MoveCommand
Program counter :  29
False ConditionCommand 4
  Branch Instruction
Program counter :  33
:move = (:move + 10) AssignmentCommand 1
  Assignment Statement
Program counter :  34
False ConditionCommand 2
  Branch Instruction
[SBFL] Program Ended.

Program counter :  0
pendown PenCommand 1
  PenCommand
Program counter :  1
(:x > 0) ConditionCommand 16
  Branch Instruction
Program counter :  2
(:y > 0) ConditionCommand 11
  Branch Instruction
Program counter :  3
(:z > 0) ConditionCommand 6
  Branch Instruction
Program counter :  4
forward 10 MoveCommand 1
  MoveCommand
Program counter :  5
left 45 MoveCommand 1
  MoveCommand
Program counter :  6
backward 10 MoveCommand 1
  MoveCommand
Program counter :  7
right 45 MoveCommand 1
  MoveCommand
Program counter :  8
False ConditionCommand 4
  Branch Instruction
Program counter :  12
False ConditionCommand 4
  Branch Instruction
Program counter :  16
False ConditionCommand 4
  Branch Instruction
Program counter :  20
(:x > 0) ConditionCommand 15
  Branch Instruction
Program counter :  21
(:y > 0) ConditionCommand 9
  Branch Instruction
Program counter :  22
(:z > 0) ConditionCommand 4
  Branch Instruction
Program counter :  23
forward :move MoveCommand 1
  MoveCommand
Program counter :  24
right 10 MoveCommand 1
  MoveCommand
Program counter :  25
False ConditionCommand 4
  Branch Instruction
Program counter :  29
False ConditionCommand 4
  Branch Instruction
Program counter :  33
:move = (:move + 10) AssignmentCommand 1
  Assignment Statement
Program counter :  34
False ConditionCommand 2
  Branch Instruction
[SBFL] Program Ended.

Program counter :  0
pendown PenCommand 1
  PenCommand
Program counter :  1
(:x > 0) ConditionCommand 16
  Branch Instruction
Program counter :  2
(:y > 0) ConditionCommand 11
  Branch Instruction
Program counter :  3
(:z > 0) ConditionCommand 6
  Branch Instruction
Program counter :  4
forward 10 MoveCommand 1
  MoveCommand
Program counter :  5
left 45 MoveCommand 1
  MoveCommand
Program counter :  6
backward 10 MoveCommand 1
  MoveCommand
Program counter :  7
right 45 MoveCommand 1
  MoveCommand
Program counter :  8
False ConditionCommand 4
  Branch Instruction
Program counter :  12
False ConditionCommand 4
  Branch Instruction
Program counter :  16
False ConditionCommand 4
  Branch Instruction
Program counter :  20
(:x > 0) ConditionCommand 15
  Branch Instruction
Program counter :  21
(:y > 0) ConditionCommand 9
  Branch Instruction
Program counter :  22
(:z > 0) ConditionCommand 4
  Branch Instruction
Program counter :  23
forward :move MoveCommand 1
  MoveCommand
Program counter :  24
right 10 MoveCommand 1
  MoveCommand
Program counter :  25
False ConditionCommand 4
  Branch Instruction
Program counter :  29
False ConditionCommand 4
  Branch Instruction
Program counter :  33
:move = (:move + 10) AssignmentCommand 1
  Assignment Statement
Program counter :  34
False ConditionCommand 2
  Branch Instruction
[SBFL] Program Ended.

Program counter :  0
pendown PenCommand 1
  PenCommand
Program counter :  1
(:x > 0) ConditionCommand 16
  Branch Instruction
Program counter :  2
(:y > 0) ConditionCommand 11
  Branch Instruction
Program counter :  3
(:z > 0) ConditionCommand 6
  Branch Instruction
Program counter :  4
forward 10 MoveCommand 1
  MoveCommand
Program counter :  5
left 45 MoveCommand 1
  MoveCommand
Program counter :  6
backward 10 MoveCommand 1
  MoveCommand
Program counter :  7
right 45 MoveCommand 1
  MoveCommand
Program counter :  8
False ConditionCommand 4
  Branch Instruction
Program counter :  12
False ConditionCommand 4
  Branch Instruction
Program counter :  16
False ConditionCommand 4
  Branch Instruction
Program counter :  20
(:x > 0) ConditionCommand 15
  Branch Instruction
Program counter :  21
(:y > 0) ConditionCommand 9
  Branch Instruction
Program counter :  22
(:z > 0) ConditionCommand 4
  Branch Instruction
Program counter :  23
forward :move MoveCommand 1
  MoveCommand
Program counter :  24
right 10 MoveCommand 1
  MoveCommand
Program counter :  25
False ConditionCommand 4
  Branch Instruction
Program counter :  29
False ConditionCommand 4
  Branch Instruction
Program counter :  33
:move = (:move + 10) AssignmentCommand 1
  Assignment Statement
Program counter :  34
False ConditionCommand 2
  Branch Instruction
[SBFL] Program Ended.

Program counter :  0
pendown PenCommand 1
  PenCommand
Program counter :  1
(:x > 0) ConditionCommand 16
  Branch Instruction
Program counter :  17
backward 10 MoveCommand 1
  MoveCommand
Program counter :  18
left 45 MoveCommand 1
  MoveCommand
Program counter :  19
forward 20 MoveCommand 1
  MoveCommand
Program counter :  20
(:x > 0) ConditionCommand 15
  Branch Instruction
Program counter :  35
backward 10 MoveCommand 1
  MoveCommand
[SBFL] Program Ended.

Program counter :  0
pendown PenCommand 1
  PenCommand
Program counter :  1
(:x > 0) ConditionCommand 16
  Branch Instruction
Program counter :  17
backward 10 MoveCommand 1
  MoveCommand
Program counter :  18
left 45 MoveCommand 1
  MoveCommand
Program counter :  19
forward 20 MoveCommand 1
  MoveCommand
Program counter :  20
(:x > 0) ConditionCommand 15
  Branch Instruction
Program counter :  35
backward 10 MoveCommand 1
  MoveCommand
[SBFL] Program Ended.

Program counter :  0
pendown PenCommand 1
  PenCommand
Program counter :  1
(:x > 0) ConditionCommand 16
  Branch Instruction
Program counter :  17
backward 10 MoveCommand 1
  MoveCommand
Program counter :  18
left 45 MoveCommand 1
  MoveCommand
Program counter :  19
forward 20 MoveCommand 1
  MoveCommand
Program counter :  20
(:x > 0) ConditionCommand 15
  Branch Instruction
Program counter :  35
backward 10 MoveCommand 1
  MoveCommand
[SBFL] Program Ended.

Program counter :  0
pendown PenCommand 1
  PenCommand
Program counter :  1
(:x > 0) ConditionCommand 16
  Branch Instruction
Program counter :  17
backward 10 MoveCommand 1
  MoveCommand
Program counter :  18
left 45 MoveCommand 1
  MoveCommand
Program counter :  19
forward 20 MoveCommand 1
  MoveCommand
Program counter :  20
(:x > 0) ConditionCommand 15
  Branch Instruction
Program counter :  35
backward 10 MoveCommand 1
  MoveCommand
[SBFL] Program Ended.

Program counter :  0
pendown PenCommand 1
  PenCommand
Program counter :  1
(:x > 0) ConditionCommand 16
  Branch Instruction
Program counter :  17
backward 10 MoveCommand 1
  MoveCommand
Program counter :  18
left 45 MoveCommand 1
  MoveCommand
Program counter :  19
forward 20 MoveCommand 1
  MoveCommand
Program counter :  20
(:x > 0) ConditionCommand 15
  Branch Instruction
Program counter :  35
backward 10 MoveCommand 1
  MoveCommand
[SBFL] Program Ended.

Program counter :  0
pendown PenCommand 1
  PenCommand
Program counter :  1
(:x > 0) ConditionCommand 16
  Branch Instruction
Program counter :  17
backward 10 MoveCommand 1
  MoveCommand
Program counter :  18
left 45 MoveCommand 1
  MoveCommand
Program counter :  19
forward 20 MoveCommand 1
  MoveCommand
Program counter :  20
(:x > 0) ConditionCommand 15
  Branch Instruction
Program counter :  35
backward 10 MoveCommand 1
  MoveCommand
[SBFL] Program Ended.

Program counter :  0
pendown PenCommand 1
  PenCommand
Program counter :  1
(:x > 0) ConditionCommand 16
  Branch Instruction
Program counter :  17
backward 10 MoveCommand 1
  MoveCommand
Program counter :  18
left 45 MoveCommand 1
  MoveCommand
Program counter :  19
forward 20 MoveCommand 1
  MoveCommand
Program counter :  20
(:x > 0) ConditionCommand 15
  Branch Instruction
Program counter :  35
backward 10 MoveCommand 1
  MoveCommand
[SBFL] Program Ended.

Program counter :  0
pendown PenCommand 1
  PenCommand
Program counter :  1
(:x > 0) ConditionCommand 16
  Branch Instruction
Program counter :  2
(:y > 0) ConditionCommand 11
  Branch Instruction
Program counter :  3
(:z > 0) ConditionCommand 6
  Branch Instruction
Program counter :  4
forward 10 MoveCommand 1
  MoveCommand
Program counter :  5
left 45 MoveCommand 1
  MoveCommand
Program counter :  6
backward 10 MoveCommand 1
  MoveCommand
Program counter :  7
right 45 MoveCommand 1
  MoveCommand
Program counter :  8
False ConditionCommand 4
  Branch Instruction
Program counter :  12
False ConditionCommand 4
  Branch Instruction
Program counter :  16
False ConditionCommand 4
  Branch Instruction
Program counter :  20
(:x > 0) ConditionCommand 15
  Branch Instruction
Program counter :  21
(:y > 0) ConditionCommand 9
  Branch Instruction
Program counter :  22
(:z > 0) ConditionCommand 4
  Branch Instruction
Program counter :  23
forward :move MoveCommand 1
  MoveCommand
Program counter :  24
right 10 MoveCommand 1
  MoveCommand
Program counter :  25
False ConditionCommand 4
  Branch Instruction
Program counter :  29
False ConditionCommand 4
  Branch Instruction
Program counter :  33
:move = (:move + 10) AssignmentCommand 1
  Assignment Statement
Program counter :  34
False ConditionCommand 2
  Branch Instruction
[SBFL] Program Ended.

Program counter :  0
pendown PenCommand 1
  PenCommand
Program counter :  1
(:x > 0) ConditionCommand 16
  Branch Instruction
Program counter :  2
(:y > 0) ConditionCommand 11
  Branch Instruction
Program counter :  13
backward 10 MoveCommand 1
  MoveCommand
Program counter :  14
left 45 MoveCommand 1
  MoveCommand
Program counter :  15
forward 20 MoveCommand 1
  MoveCommand
Program counter :  16
False ConditionCommand 4
  Branch Instruction
Program counter :  20
(:x > 0) ConditionCommand 15
  Branch Instruction
Program counter :  21
(:y > 0) ConditionCommand 9
  Branch Instruction
Program counter :  30
backward 10 MoveCommand 1
  MoveCommand
Program counter :  31
left 45 MoveCommand 1
  MoveCommand
Program counter :  32
forward 20 MoveCommand 1
  MoveCommand
Program counter :  33
:move = (:move + 10) AssignmentCommand 1
  Assignment Statement
Program counter :  34
False ConditionCommand 2
  Branch Instruction
[SBFL] Program Ended.

Program counter :  0
pendown PenCommand 1
  PenCommand
Program counter :  1
(:x > 0) ConditionCommand 16
  Branch Instruction
Program counter :  2
(:y > 0) ConditionCommand 11
  Branch Instruction
Program counter :  13
backward 10 MoveCommand 1
  MoveCommand
Program counter :  14
left 45 MoveCommand 1
  MoveCommand
Program counter :  15
forward 20 MoveCommand 1
  MoveCommand
Program counter :  16
False ConditionCommand 4
  Branch Instruction
Program counter :  20
(:x > 0) ConditionCommand 15
  Branch Instruction
Program counter :  21
(:y > 0) ConditionCommand 9
  Branch Instruction
Program counter :  30
backward 10 MoveCommand 1
  MoveCommand
Program counter :  31
left 45 MoveCommand 1
  MoveCommand
Program counter :  32
forward 20 MoveCommand 1
  MoveCommand
Program counter :  33
:move = (:move + 10) AssignmentCommand 1
  Assignment Statement
Program counter :  34
False ConditionCommand 2
  Branch Instruction
[SBFL] Program Ended.

Program counter :  0
pendown PenCommand 1
  PenCommand
Program counter :  1
(:x > 0) ConditionCommand 16
  Branch Instruction
Program counter :  2
(:y > 0) ConditionCommand 11
  Branch Instruction
Program counter :  13
backward 10 MoveCommand 1
  MoveCommand
Program counter :  14
left 45 MoveCommand 1
  MoveCommand
Program counter :  15
forward 20 MoveCommand 1
  MoveCommand
Program counter :  16
False ConditionCommand 4
  Branch Instruction
Program counter :  20
(:x > 0) ConditionCommand 15
  Branch Instruction
Program counter :  21
(:y > 0) ConditionCommand 9
  Branch Instruction
Program counter :  30
backward 10 MoveCommand 1
  MoveCommand
Program counter :  31
left 45 MoveCommand 1
  MoveCommand
Program counter :  32
forward 20 MoveCommand 1
  MoveCommand
Program counter :  33
:move = (:move + 10) AssignmentCommand 1
  Assignment Statement
Program counter :  34
False ConditionCommand 2
  Branch Instruction
[SBFL] Program Ended.

Program counter :  0
pendown PenCommand 1
  PenCommand
Program counter :  1
(:x > 0) ConditionCommand 16
  Branch Instruction
Program counter :  2
(:y > 0) ConditionCommand 11
  Branch Instruction
Program counter :  3
(:z > 0) ConditionCommand 6
  Branch Instruction
Program counter :  4
forward 10 MoveCommand 1
  MoveCommand
Program counter :  5
left 45 MoveCommand 1
  MoveCommand
Program counter :  6
backward 10 MoveCommand 1
  MoveCommand
Program counter :  7
right 45 MoveCommand 1
  MoveCommand
Program counter :  8
False ConditionCommand 4
  Branch Instruction
Program counter :  12
False ConditionCommand 4
  Branch Instruction
Program counter :  16
False ConditionCommand 4
  Branch Instruction
Program counter :  20
(:x > 0) ConditionCommand 15
  Branch Instruction
Program counter :  21
(:y > 0) ConditionCommand 9
  Branch Instruction
Program counter :  22
(:z > 0) ConditionCommand 4
  Branch Instruction
Program counter :  23
forward :move MoveCommand 1
  MoveCommand
Program counter :  24
right 10 MoveCommand 1
  MoveCommand
Program counter :  25
False ConditionCommand 4
  Branch Instruction
Program counter :  29
False ConditionCommand 4
  Branch Instruction
Program counter :  33
:move = (:move + 10) AssignmentCommand 1
  Assignment Statement
Program counter :  34
False ConditionCommand 2
  Branch Instruction
[SBFL] Program Ended.

Program counter :  0
pendown PenCommand 1
  PenCommand
Program counter :  1
(:x > 0) ConditionCommand 16
  Branch Instruction
Program counter :  17
backward 10 MoveCommand 1
  MoveCommand
Program counter :  18
left 45 MoveCommand 1
  MoveCommand
Program counter :  19
forward 20 MoveCommand 1
  MoveCommand
Program counter :  20
(:x > 0) ConditionCommand 15
  Branch Instruction
Program counter :  35
backward 10 MoveCommand 1
  MoveCommand
[SBFL] Program Ended.

Iteration : 1, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 2, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 3, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 4, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 5, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 6, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 7, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 8, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 9, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 10, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 11, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 12, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 13, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 14, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 15, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 16, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 17, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 18, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 19, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 20, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 21, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 22, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 23, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 24, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 25, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 26, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 27, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 28, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 29, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 30, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 31, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 32, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 33, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 34, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 35, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 36, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 37, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 38, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 39, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 40, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 41, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 42, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 43, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 44, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 45, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 46, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 47, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 48, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 49, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 50, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 51, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 52, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 53, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 54, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 55, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 56, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 57, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 58, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 59, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 60, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 61, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 62, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 63, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 64, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 65, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 66, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 67, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 68, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 69, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 70, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 71, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 72, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 73, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 74, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 75, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 76, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 77, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 78, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 79, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 80, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 81, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 82, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 83, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 84, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 85, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 86, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 87, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 88, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 89, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 90, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 91, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 92, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 93, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 94, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 95, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 96, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 97, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 98, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 99, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Iteration : 100, Best fit-score : 0.13174603174603172, |pop|: 100, |Test-Suite| :4
Program counter :  0
pendown PenCommand 1
  PenCommand
Program counter :  1
(:x > 0) ConditionCommand 16
  Branch Instruction
Program counter :  2
(:y > 0) ConditionCommand 11
  Branch Instruction
Program counter :  13
backward 10 MoveCommand 1
  MoveCommand
Program counter :  14
left 45 MoveCommand 1
  MoveCommand
Program counter :  15
forward 20 MoveCommand 1
  MoveCommand
Program counter :  16
False ConditionCommand 4
  Branch Instruction
Program counter :  20
(:x > 0) ConditionCommand 15
  Branch Instruction
Program counter :  21
(:y > 0) ConditionCommand 9
  Branch Instruction
Program counter :  30
backward 10 MoveCommand 1
  MoveCommand
Program counter :  31
left 45 MoveCommand 1
  MoveCommand
Program counter :  32
forward 20 MoveCommand 1
  MoveCommand
Program counter :  33
:move = (:move + 10) AssignmentCommand 1
  Assignment Statement
Program counter :  34
False ConditionCommand 2
  Branch Instruction
[SBFL] Program Ended.

Program counter :  0
pendown PenCommand 1
  PenCommand
Program counter :  1
(:x > 0) ConditionCommand 16
  Branch Instruction
Program counter :  2
(:y > 0) ConditionCommand 11
  Branch Instruction
Program counter :  13
backward 10 MoveCommand 1
  MoveCommand
Program counter :  14
left 45 MoveCommand 1
  MoveCommand
Program counter :  15
forward 20 MoveCommand 1
  MoveCommand
Program counter :  16
False ConditionCommand 4
  Branch Instruction
Program counter :  20
(:x > 0) ConditionCommand 15
  Branch Instruction
Program counter :  21
(:y > 0) ConditionCommand 9
  Branch Instruction
Program counter :  30
backward 100 MoveCommand 1
  MoveCommand
Program counter :  31
left 45 MoveCommand 1
  MoveCommand
Program counter :  32
forward 20 MoveCommand 1
  MoveCommand
Program counter :  33
:move = (:move + 10) AssignmentCommand 1
  Assignment Statement
Program counter :  34
False ConditionCommand 2
  Branch Instruction
[SBFL] Program Ended.

Program counter :  0
pendown PenCommand 1
  PenCommand
Program counter :  1
(:x > 0) ConditionCommand 16
  Branch Instruction
Program counter :  2
(:y > 0) ConditionCommand 11
  Branch Instruction
Program counter :  3
(:z > 0) ConditionCommand 6
  Branch Instruction
Program counter :  4
forward 10 MoveCommand 1
  MoveCommand
Program counter :  5
left 45 MoveCommand 1
  MoveCommand
Program counter :  6
backward 10 MoveCommand 1
  MoveCommand
Program counter :  7
right 45 MoveCommand 1
  MoveCommand
Program counter :  8
False ConditionCommand 4
  Branch Instruction
Program counter :  12
False ConditionCommand 4
  Branch Instruction
Program counter :  16
False ConditionCommand 4
  Branch Instruction
Program counter :  20
(:x > 0) ConditionCommand 15
  Branch Instruction
Program counter :  21
(:y > 0) ConditionCommand 9
  Branch Instruction
Program counter :  22
(:z > 0) ConditionCommand 4
  Branch Instruction
Program counter :  23
forward :move MoveCommand 1
  MoveCommand
Program counter :  24
right 10 MoveCommand 1
  MoveCommand
Program counter :  25
False ConditionCommand 4
  Branch Instruction
Program counter :  29
False ConditionCommand 4
  Branch Instruction
Program counter :  33
:move = (:move + 10) AssignmentCommand 1
  Assignment Statement
Program counter :  34
False ConditionCommand 2
  Branch Instruction
[SBFL] Program Ended.

Program counter :  0
pendown PenCommand 1
  PenCommand
Program counter :  1
(:x > 0) ConditionCommand 16
  Branch Instruction
Program counter :  2
(:y > 0) ConditionCommand 11
  Branch Instruction
Program counter :  3
(:z > 0) ConditionCommand 6
  Branch Instruction
Program counter :  4
forward 10 MoveCommand 1
  MoveCommand
Program counter :  5
left 45 MoveCommand 1
  MoveCommand
Program counter :  6
backward 10 MoveCommand 1
  MoveCommand
Program counter :  7
right 45 MoveCommand 1
  MoveCommand
Program counter :  8
False ConditionCommand 4
  Branch Instruction
Program counter :  12
False ConditionCommand 4
  Branch Instruction
Program counter :  16
False ConditionCommand 4
  Branch Instruction
Program counter :  20
(:x > 0) ConditionCommand 15
  Branch Instruction
Program counter :  21
(:y > 0) ConditionCommand 9
  Branch Instruction
Program counter :  22
(:z > 0) ConditionCommand 4
  Branch Instruction
Program counter :  23
forward :move MoveCommand 1
  MoveCommand
Program counter :  24
right 10 MoveCommand 1
  MoveCommand
Program counter :  25
False ConditionCommand 4
  Branch Instruction
Program counter :  29
False ConditionCommand 4
  Branch Instruction
Program counter :  33
:move = (:move + 10) AssignmentCommand 1
  Assignment Statement
Program counter :  34
False ConditionCommand 2
  Branch Instruction
[SBFL] Program Ended.

Program counter :  0
pendown PenCommand 1
  PenCommand
Program counter :  1
(:x > 0) ConditionCommand 16
  Branch Instruction
Program counter :  2
(:y > 0) ConditionCommand 11
  Branch Instruction
Program counter :  3
(:z > 0) ConditionCommand 6
  Branch Instruction
Program counter :  9
backward 10 MoveCommand 1
  MoveCommand
Program counter :  10
left 45 MoveCommand 1
  MoveCommand
Program counter :  11
forward 20 MoveCommand 1
  MoveCommand
Program counter :  12
False ConditionCommand 4
  Branch Instruction
Program counter :  16
False ConditionCommand 4
  Branch Instruction
Program counter :  20
(:x > 0) ConditionCommand 15
  Branch Instruction
Program counter :  21
(:y > 0) ConditionCommand 9
  Branch Instruction
Program counter :  22
(:z > 0) ConditionCommand 4
  Branch Instruction
Program counter :  26
backward 10 MoveCommand 1
  MoveCommand
Program counter :  27
left 45 MoveCommand 1
  MoveCommand
Program counter :  28
forward 20 MoveCommand 1
  MoveCommand
Program counter :  29
False ConditionCommand 4
  Branch Instruction
Program counter :  33
:move = (:move + 10) AssignmentCommand 1
  Assignment Statement
Program counter :  34
False ConditionCommand 2
  Branch Instruction
[SBFL] Program Ended.

Program counter :  0
pendown PenCommand 1
  PenCommand
Program counter :  1
(:x > 0) ConditionCommand 16
  Branch Instruction
Program counter :  2
(:y > 0) ConditionCommand 11
  Branch Instruction
Program counter :  3
(:z > 0) ConditionCommand 6
  Branch Instruction
Program counter :  9
backward 10 MoveCommand 1
  MoveCommand
Program counter :  10
left 45 MoveCommand 1
  MoveCommand
Program counter :  11
forward 20 MoveCommand 1
  MoveCommand
Program counter :  12
False ConditionCommand 4
  Branch Instruction
Program counter :  16
False ConditionCommand 4
  Branch Instruction
Program counter :  20
(:x > 0) ConditionCommand 15
  Branch Instruction
Program counter :  21
(:y > 0) ConditionCommand 9
  Branch Instruction
Program counter :  22
(:z > 0) ConditionCommand 4
  Branch Instruction
Program counter :  26
backward 10 MoveCommand 1
  MoveCommand
Program counter :  27
left 45 MoveCommand 1
  MoveCommand
Program counter :  28
forward 20 MoveCommand 1
  MoveCommand
Program counter :  29
False ConditionCommand 4
  Branch Instruction
Program counter :  33
:move = (:move + 10) AssignmentCommand 1
  Assignment Statement
Program counter :  34
False ConditionCommand 2
  Branch Instruction
[SBFL] Program Ended.

Program counter :  0
pendown PenCommand 1
  PenCommand
Program counter :  1
(:x > 0) ConditionCommand 16
  Branch Instruction
Program counter :  17
backward 10 MoveCommand 1
  MoveCommand
Program counter :  18
left 45 MoveCommand 1
  MoveCommand
Program counter :  19
forward 20 MoveCommand 1
  MoveCommand
Program counter :  20
(:x > 0) ConditionCommand 15
  Branch Instruction
Program counter :  35
backward 10 MoveCommand 1
  MoveCommand
[SBFL] Program Ended.

Program counter :  0
pendown PenCommand 1
  PenCommand
Program counter :  1
(:x > 0) ConditionCommand 16
  Branch Instruction
Program counter :  17
backward 10 MoveCommand 1
  MoveCommand
Program counter :  18
left 45 MoveCommand 1
  MoveCommand
Program counter :  19
forward 20 MoveCommand 1
  MoveCommand
Program counter :  20
(:x > 0) ConditionCommand 15
  Branch Instruction
Program counter :  35
backward 80 MoveCommand 1
  MoveCommand
[SBFL] Program Ended.


DONE..
